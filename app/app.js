// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var AppRouter, Board, BoardsList, Card, CardView, CardsList, Comment, CommentsList, CommentsView, HomeTabs, List, ListItemView, ListView, ListsList, ListsTabView, Member, MemberDetailsView, MemberView, MembersList, Organization, OrganizationView, OrganizationsList, Trello, app_router, lochash, token;
    Trello = {
      key: "87ac65f2828882a57ea1d05fb1e40c88",
      userToken: ""
    };
    lochash = location.hash.substr(1);
    token = lochash.substr(lochash.indexOf('token=')).split('&')[0].split('=')[1];
    window.auth = function() {
      var current_location, redirect_to;
      current_location = window.location.href;
      redirect_to = "https://trello.com/1/authorize?key=" + Trello.key + "&name=AppName&expiration=never&redirect_uri=" + current_location + "&callback_method=fragment";
      return window.location = redirect_to;
    };
    Member = (function(_super) {

      __extends(Member, _super);

      function Member() {
        return Member.__super__.constructor.apply(this, arguments);
      }

      Member.prototype.initialize = function() {
        if (this.attributes.idMember) {
          return this.id = this.attributes.idMember;
        }
      };

      Member.prototype.url = function() {
        return "https://trello.com/1/members/" + this.id + "?key=" + Trello.key + "&token=" + Trello.userToken;
      };

      return Member;

    })(Backbone.Model);
    Organization = (function(_super) {

      __extends(Organization, _super);

      function Organization() {
        return Organization.__super__.constructor.apply(this, arguments);
      }

      return Organization;

    })(Backbone.Model);
    Card = (function(_super) {

      __extends(Card, _super);

      function Card() {
        return Card.__super__.constructor.apply(this, arguments);
      }

      Card.prototype.initialize = function() {
        this.comments = new CommentsList;
        return this.comments.id = this.id;
      };

      return Card;

    })(Backbone.Model);
    List = (function(_super) {

      __extends(List, _super);

      function List() {
        return List.__super__.constructor.apply(this, arguments);
      }

      List.prototype.url = function() {
        return "https://trello.com/1/lists/" + this.id + "?key=" + Trello.key + "&token=" + Trello.userToken;
      };

      List.prototype.initialize = function() {
        this.cards = new CardsList;
        return this.cards.id = this.id;
      };

      return List;

    })(Backbone.Model);
    Board = (function(_super) {

      __extends(Board, _super);

      function Board() {
        return Board.__super__.constructor.apply(this, arguments);
      }

      Board.prototype.url = function() {
        return "https://trello.com/1/boards/" + this.id + "?key=" + Trello.key + "&token=" + Trello.userToken;
      };

      Board.prototype.initialize = function() {
        this.lists = new ListsList;
        return this.lists.id = this.id;
      };

      return Board;

    })(Backbone.Model);
    Comment = (function(_super) {

      __extends(Comment, _super);

      function Comment() {
        return Comment.__super__.constructor.apply(this, arguments);
      }

      return Comment;

    })(Backbone.Model);
    MembersList = (function(_super) {

      __extends(MembersList, _super);

      function MembersList() {
        return MembersList.__super__.constructor.apply(this, arguments);
      }

      MembersList.prototype.model = Member;

      return MembersList;

    })(Backbone.Collection);
    OrganizationsList = (function(_super) {

      __extends(OrganizationsList, _super);

      function OrganizationsList() {
        return OrganizationsList.__super__.constructor.apply(this, arguments);
      }

      OrganizationsList.prototype.model = Organization;

      OrganizationsList.prototype.url = function() {
        return "https://trello.com/1/members/me/organizations?key=" + Trello.key + "&token=" + Trello.userToken;
      };

      return OrganizationsList;

    })(Backbone.Collection);
    ListsList = (function(_super) {

      __extends(ListsList, _super);

      function ListsList() {
        return ListsList.__super__.constructor.apply(this, arguments);
      }

      ListsList.prototype.model = List;

      ListsList.prototype.url = function() {
        return "https://trello.com/1/boards/" + this.id + "/lists?key=" + Trello.key + "&token=" + Trello.userToken;
      };

      return ListsList;

    })(Backbone.Collection);
    BoardsList = (function(_super) {

      __extends(BoardsList, _super);

      function BoardsList() {
        return BoardsList.__super__.constructor.apply(this, arguments);
      }

      BoardsList.prototype.model = Board;

      BoardsList.prototype.url = function() {
        return "https://trello.com/1/members/me/boards?key=" + Trello.key + "&token=" + Trello.userToken;
      };

      return BoardsList;

    })(Backbone.Collection);
    CardsList = (function(_super) {

      __extends(CardsList, _super);

      function CardsList() {
        return CardsList.__super__.constructor.apply(this, arguments);
      }

      CardsList.prototype.model = Card;

      CardsList.prototype.url = function() {
        return "https://trello.com/1/lists/" + this.id + "/cards?key=" + Trello.key + "&token=" + Trello.userToken;
      };

      return CardsList;

    })(Backbone.Collection);
    CardsList = (function(_super) {

      __extends(CardsList, _super);

      function CardsList() {
        return CardsList.__super__.constructor.apply(this, arguments);
      }

      CardsList.prototype.model = Card;

      CardsList.prototype.url = function() {
        return "https://trello.com/1/lists/" + this.id + "/cards?key=" + Trello.key + "&token=" + Trello.userToken;
      };

      return CardsList;

    })(Backbone.Collection);
    CommentsList = (function(_super) {

      __extends(CommentsList, _super);

      function CommentsList() {
        return CommentsList.__super__.constructor.apply(this, arguments);
      }

      CommentsList.prototype.model = Comment;

      CommentsList.prototype.url = function() {
        return "https://api.trello.com/1/cards/" + this.id + "/actions?filter=commentCard&key=" + Trello.key + "&token=" + Trello.userToken;
      };

      return CommentsList;

    })(Backbone.Collection);
    ListItemView = (function(_super) {

      __extends(ListItemView, _super);

      function ListItemView() {
        return ListItemView.__super__.constructor.apply(this, arguments);
      }

      ListItemView.prototype.initialize = function() {
        this.template = this.options.template;
        return this.render();
      };

      ListItemView.prototype.render = function() {
        $(this.el).html(this.template(this.model.toJSON()));
        return this;
      };

      return ListItemView;

    })(Backbone.View);
    ListView = (function(_super) {

      __extends(ListView, _super);

      function ListView() {
        return ListView.__super__.constructor.apply(this, arguments);
      }

      ListView.prototype.initialize = function() {
        this.template = _.template(this.options.template.html());
        console.log(this);
        this.render();
        return this.model.on("reset", this.render, this);
      };

      ListView.prototype.render = function() {
        var that;
        $(this.el).empty();
        that = this;
        _.each(this.model.models, function(singleModel) {
          return that.renderOne(singleModel);
        });
        return bb.imageList.apply([this.el]);
      };

      ListView.prototype.renderOne = function(singleModel) {
        var board;
        board = new ListItemView({
          model: singleModel,
          template: this.template
        });
        return $(this.el).append(board.render().el);
      };

      return ListView;

    })(Backbone.View);
    HomeTabs = (function(_super) {

      __extends(HomeTabs, _super);

      function HomeTabs() {
        return HomeTabs.__super__.constructor.apply(this, arguments);
      }

      HomeTabs.prototype.template = _.template($("#tabs").html());

      HomeTabs.prototype.initialize = function(selected) {
        $("#menu").html(this.template({
          "selected": selected
        }));
        return bb.actionBar.apply($("#actionbar")[0]);
      };

      return HomeTabs;

    })(Backbone.View);
    ListsTabView = (function(_super) {

      __extends(ListsTabView, _super);

      function ListsTabView() {
        return ListsTabView.__super__.constructor.apply(this, arguments);
      }

      ListsTabView.prototype.template = _.template($("#lists_tabs_item_template").html());

      ListsTabView.prototype.initialize = function() {
        $("#menu").html($("#lists_tabs_template").html());
        return this.render();
      };

      ListsTabView.prototype.render = function() {
        var that;
        that = this;
        _.each(this.model.models, function(singleModel, key) {
          return that.renderOne(singleModel, key);
        });
        return bb.actionBar.apply($("#actionbar")[0]);
      };

      ListsTabView.prototype.renderOne = function(singleModel, key) {
        var jsonModel;
        jsonModel = singleModel.toJSON();
        jsonModel["key"] = key;
        return $("#actionbar").append(this.template(jsonModel));
      };

      return ListsTabView;

    })(Backbone.View);
    CardView = (function(_super) {

      __extends(CardView, _super);

      function CardView() {
        return CardView.__super__.constructor.apply(this, arguments);
      }

      CardView.prototype.template = _.template($("#card_template").html());

      CardView.prototype.initialize = function() {
        this.render();
        return this.model.comments.fetch({
          success: function(data) {
            var commentsView;
            return commentsView = new CommentsView({
              model: data
            });
          }
        });
      };

      CardView.prototype.render = function() {
        $("#screen").html(this.template(this.model.toJSON()));
        return bb.roundPanel.apply($("[data-bb-type=round-panel]"));
      };

      return CardView;

    })(Backbone.View);
    CommentsView = (function(_super) {

      __extends(CommentsView, _super);

      function CommentsView() {
        return CommentsView.__super__.constructor.apply(this, arguments);
      }

      CommentsView.prototype.el = $("#screen");

      CommentsView.prototype.template = _.template($("#comment_item_template").html());

      CommentsView.prototype.events = {
        "click .button": "add"
      };

      CommentsView.prototype.initialize = function() {
        console.log($("body"));
        return this.render();
      };

      CommentsView.prototype.render = function() {
        _.each(this.model.models, this.renderOne, this);
        return bb.roundPanel.apply($("#comments > [data-bb-type=round-panel]"));
      };

      CommentsView.prototype.renderOne = function(singleModel) {
        return $("#comments").append(this.template(singleModel.toJSON()));
      };

      CommentsView.prototype.add = function() {
        var comment;
        comment = new Comment({
          text: "sample text"
        });
        comment.url = function() {
          return "https://api.trello.com/1/cards/" + this.boardId + "/actions/comments?key=" + Trello.key + "&token=" + Trello.userToken;
        };
        console.log(comment);
        return comment.save();
      };

      return CommentsView;

    })(Backbone.View);
    OrganizationView = (function(_super) {

      __extends(OrganizationView, _super);

      function OrganizationView() {
        return OrganizationView.__super__.constructor.apply(this, arguments);
      }

      OrganizationView.prototype.el = $("#screen");

      OrganizationView.prototype.template = _.template($("#organization_template").html());

      OrganizationView.prototype.initialize = function() {
        return this.render();
      };

      OrganizationView.prototype.render = function() {
        var users;
        $(this.el).html(this.template(this.model.toJSON()));
        users = new MembersList(this.model.toJSON().memberships);
        _.each(users.models, function(user) {
          var view;
          user.fetch();
          view = new MemberView({
            model: user
          });
          return $("#users").append(view.render().el);
        }, this);
        return bb.doLoad($("#screen")[0]);
      };

      return OrganizationView;

    })(Backbone.View);
    MemberView = (function(_super) {

      __extends(MemberView, _super);

      function MemberView() {
        return MemberView.__super__.constructor.apply(this, arguments);
      }

      MemberView.prototype.template = _.template($("#user_item_template").html());

      MemberView.prototype.initialize = function() {
        return this.model.on("change", this.render, this);
      };

      MemberView.prototype.render = function() {
        if (this.model.attributes.fullName) {
          $(this.el).html(this.template(this.model.toJSON()));
        }
        bb.imageList.apply($("#users"));
        return this;
      };

      return MemberView;

    })(Backbone.View);
    MemberDetailsView = (function(_super) {

      __extends(MemberDetailsView, _super);

      function MemberDetailsView() {
        return MemberDetailsView.__super__.constructor.apply(this, arguments);
      }

      MemberDetailsView.prototype.template = _.template($("#member_details_template").html());

      MemberDetailsView.prototype.el = $("#screen");

      MemberDetailsView.prototype.initialize = function() {
        return this.model.on("change", this.render, this);
      };

      MemberDetailsView.prototype.render = function() {
        $(this.el).html(this.template(this.model.toJSON()));
        return bb.doLoad($("#screen")[0]);
      };

      return MemberDetailsView;

    })(Backbone.View);
    if (token) {
      localStorage.setItem("trelloToken", token);
    }
    if (localStorage.getItem("trelloToken")) {
      Trello.userToken = localStorage.getItem("trelloToken");
      AppRouter = (function(_super) {

        __extends(AppRouter, _super);

        function AppRouter() {
          return AppRouter.__super__.constructor.apply(this, arguments);
        }

        AppRouter.prototype.routes = {
          "organizations": "getMyOrganizations",
          "organizations/:organizationId": "getOrganization",
          "boards": "getMyBoards",
          "boards/:id": "getBoard",
          "boards/:id/lists/:idList/cards": "getCardsFromList",
          "boards/:id/lists/:idList/cards/:cardID": "getCard",
          "member/:id": "getMember",
          "*actions": "getMyBoards"
        };

        AppRouter.prototype.getMyBoards = function() {
          var list, tabs;
          if (!Trello.boardsList) {
            Trello.boardsList = new BoardsList;
          }
          list = new ListView({
            model: Trello.boardsList,
            el: $("#screen"),
            template: $("#board")
          });
          Trello.boardsList.fetch();
          return tabs = new HomeTabs("boards");
        };

        AppRouter.prototype.getMyOrganizations = function() {
          var list, tabs;
          if (!Trello.organizationsList) {
            Trello.organizationsList = new OrganizationsList;
          }
          list = new ListView({
            model: Trello.organizationsList,
            el: $("#screen"),
            template: $("#organization_item_template")
          });
          Trello.organizationsList.fetch();
          return tabs = new HomeTabs("organizations");
        };

        AppRouter.prototype.getBoard = function(boardId) {
          var board;
          board = Trello.boardsList.where({
            id: boardId
          })[0];
          return board.lists.fetch({
            success: function(data) {
              var tabs;
              tabs = new ListsTabView({
                model: data
              });
              return data.models[0].cards.fetch({
                success: function(data) {
                  var list;
                  console.log(data);
                  return list = new ListView({
                    model: data,
                    el: $("#screen"),
                    template: $("#card_on_list_template")
                  });
                }
              });
            }
          });
        };

        AppRouter.prototype.getOrganization = function(organizationId) {
          var organization;
          organization = Trello.organizationsList.where({
            id: organizationId
          })[0];
          console.log(organization);
          return new OrganizationView({
            model: organization
          });
        };

        AppRouter.prototype.getCardsFromList = function(boardId, listId) {
          var board, cards, list, view;
          board = Trello.boardsList.where({
            id: boardId
          })[0];
          list = board.lists.where({
            id: listId
          })[0];
          cards = list.cards;
          view = new ListView({
            model: cards,
            el: $("#screen"),
            template: $("#card_on_list_template")
          });
          return cards.fetch();
        };

        AppRouter.prototype.getCard = function(boardId, listId, cardId) {
          var card, cardView;
          card = Trello.boardsList.where({
            id: boardId
          })[0].lists.where({
            id: listId
          })[0].cards.where({
            id: cardId
          })[0];
          console.log(card);
          return cardView = new CardView({
            model: card
          });
        };

        AppRouter.prototype.getMember = function(memberId) {
          var member;
          member = new Member({
            id: memberId
          });
          member.fetch();
          return new MemberDetailsView({
            model: member
          });
        };

        return AppRouter;

      })(Backbone.Router);
      app_router = new AppRouter;
      return Backbone.history.start();
    }
  });

}).call(this);
