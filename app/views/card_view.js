// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'backbone', 'underscore', 'text!templates/card.html', 'collections/cards', 'models/comment', 'views/card_edit_view', 'views/card_menu_view', 'text!templates/card/comment.html', 'text!templates/card/my_comment.html'], function($, Backbone, _, template, CardsCollection, Comment, CardEditView, CardMenuView, comment_template, my_comment_template) {
    var CardView;
    return CardView = (function(_super) {

      __extends(CardView, _super);

      function CardView() {
        return CardView.__super__.constructor.apply(this, arguments);
      }

      CardView.prototype.template = _.template(template);

      CardView.prototype.commentTemplate = _.template(comment_template);

      CardView.prototype.myCommentTemplate = _.template(my_comment_template);

      CardView.prototype.events = {
        "click #title": "editCard",
        "click #add_comment": "addComment"
      };

      CardView.prototype.initialize = function() {
        this.render();
        this.model.comments.on("reset", this.renderComments, this);
        this.model.comments.fetch();
        this.model.comments.on("add", this.renderSingleComment, this);
        bb.doLoad($("#screen")[0]);
        return new CardMenuView({
          el: $("#menu"),
          model: this.model
        });
      };

      CardView.prototype.render = function() {
        var collection;
        console.log(this.model.get("idMembers"));
        collection = new CardsCollection(this.model.get("idMembers"));
        $(this.el).html(this.template(this.model.toJSON()));
        return bb.titleBar.apply($("#title")[0]);
      };

      CardView.prototype.renderComments = function() {
        _.each(this.model.comments.models, function(singleModel) {
          return this.renderSingleComment(singleModel);
        }, this);
        return bb.doLoad($("#comments")[0]);
      };

      CardView.prototype.renderSingleComment = function(comment) {
        console.log(comment);
        return $("#comments").append(this.commentTemplate(comment.toJSON()));
      };

      CardView.prototype.addSingleComment = function(comment) {
        return $("#comments").append(this.myCommentTemplate(comment.toJSON()));
      };

      CardView.prototype.addComment = function() {
        var comment;
        comment = new Comment({
          text: $("#commentText").val()
        });
        comment.url = "https://trello.com/1/cards/" + this.model.id + "/actions/comments?key=" + (localStorage.getItem('trelloKey')) + "&token=" + (localStorage.getItem('trelloToken'));
        comment.save();
        this.addSingleComment(comment);
        return $("#commentText").attr("value", "");
      };

      CardView.prototype.editCard = function() {
        return new CardEditView({
          el: this.el,
          model: this.model
        });
      };

      return CardView;

    })(Backbone.View);
  });

}).call(this);
